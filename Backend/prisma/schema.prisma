generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model balanceHistoryBtc {
    id        String     @unique
    walletId  String?
    balance   Decimal?   @db.Decimal
    timeStamp Decimal?   @db.Decimal
    btcWallet btcWallet? @relation(fields: [walletId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "balance_btcwallet_fkey")
}

model balanceHistoryEth {
    id        String     @unique
    walletId  String?
    balance   Decimal?   @db.Decimal
    timeStamp Decimal?   @db.Decimal
    evmWallet evmWallet? @relation(fields: [walletId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "balance_evmwallet_fkey")
}

model btcWallet {
    id       String        @unique //ID is public key
    balance  Decimal?      @db.Decimal
    nonce    Decimal?      @db.Decimal
    balances balanceHistoryBtc[]
    input    input[]
    output   output[]
}

model btcTransaction {
    id          String   @unique //ID is txid
    txHex       String?
    amount      Decimal? @db.Decimal
    blockHash   String?
    blockNumber Decimal? @db.Decimal
    gas         Decimal? @db.Decimal
    timeStamp   Decimal? @db.Decimal
    coinbase    Boolean?
    input       input[]
    output      output[]
}

model input {
    id        String          @unique
    publicKey String?
    amount    Decimal?        @db.Decimal
    txId      String?
    type      String?
    btc       btcTransaction? @relation(fields: [txId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    wallet    btcWallet?      @relation(fields: [publicKey], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model output {
    id        String          @unique
    publicKey String?
    amount    Decimal?        @db.Decimal
    txId      String?
    type      String?
    btc       btcTransaction? @relation(fields: [txId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    wallet    btcWallet?      @relation(fields: [publicKey], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ethTransaction {
    id                String     @unique //ID is txHash
    from              String?
    to                String?
    amount            Decimal?   @db.Decimal
    blockHash         String?
    blockNumber       Decimal?   @db.Decimal
    baseFeePerGas     Decimal?   @db.Decimal
    gasUsed           Decimal?   @db.Decimal
    gasPrice          Decimal?   @db.Decimal
    feePerGas         Decimal?   @db.Decimal
    priorityFeeperGas Decimal?   @db.Decimal
    timeStamp         Decimal?   @db.Decimal //block timestamp
    type              String?
    fromWallet        evmWallet? @relation(fields: [from], references: [id], name: "fromwallet", onDelete: NoAction, onUpdate: NoAction)
    toWallet          evmWallet? @relation(fields: [to], references: [id], name: "towallet", onDelete: NoAction, onUpdate: NoAction)
}

model evmWallet {
    id                 String           @unique //ID is public key
    balance            Decimal?         @db.Decimal
    nonce              Decimal?         @db.Decimal
    balances           balanceHistoryEth[]
    transactionFromEth ethTransaction[] @relation(name: "fromwallet")
    transactionToEth   ethTransaction[] @relation(name: "towallet")
}

model shrimpwatch {
    id           String  @unique
    lastBlockEth String?
    lastBlockBtc String?
}

// for resetting local db
// model reset {
//     id  String @unique
// }
