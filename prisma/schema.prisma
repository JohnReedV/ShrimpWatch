generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model btcWallet {
    id      String   @unique //ID is public key
    balance String?
    nonce   String?
    input   input[]
    output  output[]
}

model btcTransaction {
    id          String   @unique //ID is txid
    txHash      String?
    amount      String?
    blockHash   String?
    blockNumber String?
    gas         String?
    timeStamp   String?
    input       input[]
    output      output[]
}

model input {
    id        String          @unique
    publicKey String?
    amount    String?
    txId      String?
    btc       btcTransaction? @relation(fields: [txId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    wallet    btcWallet?      @relation(fields: [publicKey], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model output {
    id        String          @unique
    publicKey String?
    amount    String?
    txId      String?
    btc       btcTransaction? @relation(fields: [txId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    wallet    btcWallet?      @relation(fields: [publicKey], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ethTransaction {
    id                String     @unique //ID is txHash
    from              String?
    to                String?
    amount            String?
    blockHash         String?
    blockNumber       String?
    baseFeePerGas     String?
    gasUsed           String?
    gasPrice          String?
    feePerGas         String?
    priorityFeeperGas String?
    timeStamp         String? //block timestamp
    type              String?
    fromWallet        evmWallet? @relation(fields: [from], references: [id], name: "fromwallet", onDelete: NoAction, onUpdate: NoAction)
    toWallet          evmWallet? @relation(fields: [to], references: [id], name: "towallet", onDelete: NoAction, onUpdate: NoAction)
}

model evmWallet {
    id                 String           @unique //ID is public key
    balance            String?
    nonce              String?
    transactionFromEth ethTransaction[] @relation(name: "fromwallet")
    transactionToEth   ethTransaction[] @relation(name: "towallet")
}

model shrimpwatch {
    id           String  @unique
    lastBlockEth String?
    lastBlockBtc String?
}

// for resetting local db
// model reset {
//     id  String @unique
// }
